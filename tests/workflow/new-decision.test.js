const puppeteer = require("puppeteer"); const config = require("../config"); const utils = require("../utils"); async function testNewDecision() { utils.log("Starting New Decision Test"); const browser = await puppeteer.launch({ headless: config.headless, slowMo: config.slowMo }); try { const page = await browser.newPage(); await page.setViewport({ width: 1280, height: 800 }); utils.log("Navigating to application"); await page.goto(config.appUrl, { waitUntil: "networkidle2" }); await utils.takeScreenshot(page, "homepage-before-click"); utils.log("Looking for Try Now button"); // Try to find the button by multiple selectors const buttons = await page.$$("a.btn-cta, a:has-text(\"Try Now\"), a.btn-light"); utils.log(`Found ${buttons.length} potential buttons`); if (buttons.length > 0) { await buttons[0].click(); utils.log("Clicked a button"); // Wait for any content to appear, without requiring navigation await page.waitForTimeout(3000); await utils.takeScreenshot(page, "after-button-click"); const url = page.url(); utils.log(`Current URL: ${url}`); } else { utils.log("No buttons found to click"); } utils.log("Test completed successfully"); } catch (error) { utils.log("Test failed: " + error.message); await utils.takeScreenshot(page, "error-state"); } finally { await browser.close(); } } module.exports = testNewDecision; if (require.main === module) { testNewDecision(); }
